{"version":3,"sources":["+custom.js","+furniture.js"],"names":["$","document","ready","displayTooltip","event","data","id","tooltip","d3","select","ttWidth","outerWidth","text","season","opp","week","quarter","time","detail","w","window","width","xPos","clientX","attr","yPos","clientY","drawPassGraphic","console","log","margin","top","right","bottom","left","potentialHeight","height","arcMod","x","scaleLinear","range","y","domain","xAxis","axisBottom","scale","tickValues","tickFormat","d","i","svg","append","line","x1","spot","toString","x2","yards","y1","offset","offsetX1","offsetX2","passes","selectAll","enter","plays","touchdown","base","call","drawAttempts","color","interpolate","interpolateHcl","rgb","attContainer","seasons","season_year","interception","result","on","drawReceivers","key","receivers","_","orderBy","row","receiver","table","sortedData","active","click","this","hasClass","removeClass","addClass","length","push","eq","_i","siblings","getJSON","forEach","value","tempYear","closeList","Date","year","getFullYear","$hedButton","e","stopPropagation","cookie","indexOf"],"mappings":"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","file":"scripts-bundle.js","sourcesContent":["'use strict';\n\n/* global $:true document:true d3:true mapboxgl: true window: true _:true event: true */\n\n$(document).ready(function () {\n  // custom scripting goes here\n\n  var sortedData = [];\n\n  /*\n  ///////////////////////////////////////////////////////////////////////////\n  DISPLAYING THE TOOLTIP\n  ///////////////////////////////////////////////////////////////////////////\n  */\n\n  function displayTooltip(event, data, id) {\n    var tooltip = d3.select(id);\n    var ttWidth = $(id).outerWidth();\n\n    // populating the tooltip info with data from the point hovered over\n    tooltip.select('.tt-season').text(data.season);\n    tooltip.select('.tt-opponent').text(data.opp);\n    tooltip.select('.tt-week').text(data.week);\n    tooltip.select('.tt-quarter').text(data.quarter);\n    tooltip.select('.tt-time').text(data.time);\n    tooltip.select('.tt-detail').text(data.detail);\n\n    // use the clientX position in relation to the window width to position the\n    // tooltip to the left or right of the point hovered over.\n    var w = $(window).width();\n    var xPos = 0;\n    if (event.clientX > w / 2.1) {\n      xPos = event.clientX - (ttWidth - 10);\n      tooltip.attr('class', 'tooltip');\n    } else {\n      xPos = event.clientX - 10;\n      tooltip.attr('class', 'tooltip');\n    }\n\n    var yPos = event.clientY + 15;\n\n    tooltip.attr('style', 'left: ' + xPos + 'px; top: ' + yPos + 'px');\n  }\n\n  /* ///////////////////////////////////////////////////////////////////////////\n  // DRAWING THE ARC GRAPHIC\n  /////////////////////////////////////////////////////////////////////////// */\n\n  function drawPassGraphic(data) {\n    console.log(data);\n\n    var margin = {\n      top: 0,\n      right: 50,\n      bottom: 40,\n      left: 50\n    };\n\n    // getting the width and potential height\n    var width = $('#graphic').width();\n    var potentialHeight = width / 3;\n\n    // using the lesser of potentialHeight and 400 as the height of the graphic\n    var height = potentialHeight > 400 ? 400 : potentialHeight;\n\n    // the arc modifier is a factor of the height of the graphic\n    var arcMod = height / 100 * 1.5;\n\n    // setting our x and y scales\n    var x = d3.scaleLinear().range([0, width - margin.left - margin.right]);\n    var y = d3.scaleLinear().range([height, 0]);\n\n    x.domain([0, 100]);\n    y.domain([height, 0]);\n\n    // setting our x-axis and ticks. Ticks are in the format of football field\n    // yards lines, so any tick over 50 is convered back to a 0-50 range\n    var xAxis = d3.axisBottom().scale(x).tickValues([0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100]).tickFormat(function (d, i) {\n      if (i < 6) {\n        return d;\n      }\n      return d - (i - 5) * 20;\n    });\n\n    // creating our svg canvas\n    var svg = d3.select('#graphic').data(data).append('svg').attr('width', width).attr('height', height + margin.top + margin.bottom);\n\n    // creating our curved line accesssor function. lines starting spots are based\n    // on the starting spot of the play on a football field. ending spots are based\n    // on the length of the play. arcs, and curve points are based on length of play\n    // and height of graphic\n    var line = function line(d) {\n      var x1 = x(d.spot).toString();\n      var x2 = x(d.spot + +d.yards).toString();\n      var y1 = y(height).toString();\n      var offset = y(height - +d.yards / 1.25 * arcMod).toString();\n      var offsetX1 = x(d.spot + +d.yards / 4).toString();\n      var offsetX2 = x(d.spot + +d.yards - +d.yards / 4).toString();\n\n      return 'M ' + x1 + ',' + y1 + ' C ' + offsetX1 + ', ' + offset + ' ' + offsetX2 + ', ' + offset + ' ' + x2 + ', ' + y1;\n    };\n\n    // creating the group to hold our passing marks\n    var passes = svg.selectAll('g').data(data).enter().append('g').attr('transform', 'translate( ' + margin.left + ', ' + margin.top + ' )');\n\n    // appending the passing arcs\n    passes.selectAll('path').data(function (d) {\n      return d.plays;\n    }).enter().append('path').attr('class', function (d) {\n      if (d.touchdown === true) {\n        return 'pass touchdown yr-' + d.season;\n      }\n      return 'pass yr-' + d.season;\n    }).attr('d', function (d) {\n      return line(d);\n    });\n\n    // appending the base group that will hold our baseline\n    var base = svg.append('g');\n\n    base.append('line').attr('x1', 0).attr('x2', width).attr('y1', height).attr('y2', height);\n\n    // appending axis and labels\n    svg.append('g').attr('class', 'x axis').attr('transform', 'translate(' + margin.left + ', ' + height + ')').call(xAxis);\n\n    svg.append('text').attr('class', 'axis-label').attr('text-anchor', 'middle').attr('x', x(50) + margin.left).attr('y', height + 35).attr('class', 'axis-label').text('Cowboys moving left to right');\n  }\n\n  /*\n  ///////////////////////////////////////////////////////////////////////////\n  // DRAWING THE ATTEMPTS GRAPHIC\n  ///////////////////////////////////////////////////////////////////////////\n  */\n\n  function drawAttempts(data) {\n    // creating a color scale to measure yardage against\n    var color = d3.scaleLinear().domain([-10, 100]).interpolate(d3.interpolateHcl).range([d3.rgb('#e9f4fd'), d3.rgb('#0b3f65')]);\n\n    var attContainer = d3.select('#att-graphic').data(data);\n\n    // append a .season div for each season in the data\n    var seasons = attContainer.selectAll('div').data(data).enter().append('div').attr('class', function (d) {\n      return 'season season-' + d.season_year + ' clearfix';\n    });\n\n    // append a season year label to each .season div\n    seasons.append('span').attr('class', 'season-label').text(function (d) {\n      console.log(d);\n      return d.season_year;\n    });\n\n    // append a span for each attempt in a season\n    seasons.selectAll('attempt').data(function (d) {\n      return d.plays;\n    }).enter().append('span').attr('style', function (d) {\n      return 'background-color: ' + color(+d.yards);\n    }).attr('class', function (d) {\n      if (d.interception) {\n        return 'attempt interception';\n      } else if (d.touchdown) {\n        return 'attempt touchdown';\n      } else if (d.result === 'incomplete') {\n        return 'attempt incomplete';\n      }\n      return 'attempt';\n    }).text(function (d) {\n      if (d.interception) {\n        return 'I';\n      }return '';\n    }).on('mousemove', function (d) {\n      return displayTooltip(event, d, '#att-tooltip');\n    }).on('mouseout', function () {\n      return d3.select('#att-tooltip').attr('class', 'tooltip no-show');\n    });\n  }\n\n  /*\n  ///////////////////////////////////////////////////////////////////////////\n  // CONTROLLING WHICH SEASONS GET DISPLAYED IN THE COMPLETION CHART\n  ///////////////////////////////////////////////////////////////////////////\n  */\n\n  // an array that will be the currently selected seasons to view\n  var active = [];\n\n  // controlling the active/inactive styles of seasons selected\n  $('.chatter li').click(function () {\n    if ($(this).hasClass('active') === true) {\n      $(this).removeClass('active');\n    } else {\n      $(this).addClass('active');\n    }\n\n    // clearing the active array, then populating it with years of seasons clicked\n    active = [];\n    for (var i = 0; i < $('.active').length; i += 1) {\n      active.push($('.active').eq(i).text());\n    }\n\n    // hide all the passing arcs, then dispaly the ones that correspond to the\n    // selected seasons in the active array\n    $('.pass').addClass('no-show');\n\n    for (var _i = 0; _i < active.length; _i += 1) {\n      $('.yr-' + active[_i]).removeClass('no-show');\n    }\n\n    // if view-all is selected, display all arcs\n    if ($(this).attr('id') === 'view-all') {\n      $(this).siblings().removeClass('active');\n      $(this).addClass('active');\n      $('.pass').removeClass('no-show');\n    } else {\n      $('#view-all').removeClass('active');\n    }\n  });\n\n  /*\n  ///////////////////////////////////////////////////////////////////////////\n  // DRAWING THE RECEIVER CHART\n  ///////////////////////////////////////////////////////////////////////////\n  */\n\n  function drawReceivers(data, key) {\n    $('.rec-stat').text(key);\n    var receivers = _.orderBy(data, [key], ['desc']);\n    for (var i = 0; i < 10; i += 1) {\n      var row = '<tr><td>' + receivers[i].receiver + '</td><td>' + receivers[i][key] + '</td></tr>';\n      $('#rec-graphic tbody').append(row);\n    }\n    console.table(receivers);\n  }\n\n  /*\n  ///////////////////////////////////////////////////////////////////////////\n  // CLOSING THE TOOLTIP\n  ///////////////////////////////////////////////////////////////////////////\n  */\n\n  $('.tooltip button').click(function () {\n    return $('.tooltip').addClass('no-show');\n  });\n\n  /*\n  ///////////////////////////////////////////////////////////////////////////\n  // GETTING OUR DATA\n  ///////////////////////////////////////////////////////////////////////////\n  */\n\n  $.getJSON('../js/data.json', function (data) {\n    // sorts data by week, quarter and time\n    data.forEach(function (value) {\n      var tempYear = value;\n      tempYear.plays = _.orderBy(value.plays, ['week', 'quarter', 'sort_time'], ['asc', 'asc', 'desc']);\n      sortedData.push(tempYear);\n    });\n\n    // passes off sorted data to arc drawing function\n    drawPassGraphic(sortedData);\n    drawAttempts(sortedData);\n  });\n\n  $.getJSON('../js/rec-data.json', function (data) {\n    drawReceivers(data, 'catches');\n  });\n});","\"use strict\";\n\n$(document).ready(function () {\n    // injecting current year into footer\n    // DO NOT DELETE\n\n    var d = new Date();\n    var year = d.getFullYear();\n\n    $('.copyright').text(year);\n\n    // some code blocks require javascript to function, like slideshows, synopsis blocks, etc\n    // you can find that code here: https://github.com/DallasMorningNews/generator-dmninteractives/wiki/Cookbook\n\n    // closes any header dropdown menus and resets the up/down chevron\n    function closeList() {\n        $(\".open-list\").removeClass(\"open-list\");\n        $(\".open-button\").removeClass(\"open-button\");\n    }\n\n    var $hedButton = $(\".header-group button\");\n\n    // clicking any of the header dropdown menu buttons (i.e. \"topics\", or \"my account\")\n    $hedButton.click(function (e) {\n\n        // if the button that is clicked is already open, close the menu, else, close the\n        // menu then open the selected menu\n        if ($hedButton.hasClass(\"open-button\") === true && $(this).hasClass(\"open-button\") === true) {\n            closeList();\n        } else {\n            closeList();\n            $(this).addClass(\"open-button\");\n            $(this).siblings(\"ul\").addClass(\"open-list\");\n        }\n        e.stopPropagation();\n    });\n\n    // clicking anywhere in the body should close any open menus\n    $(\"body\").click(function () {\n        closeList();\n    });\n\n    // if the user is signed in, add the subscribed class to the body, which will reveal\n    // the proper my account menu items.\n    if (document.cookie.indexOf(\"DMN-P\") >= 0) {\n        $(\"body\").addClass(\"subscribed\");\n    } else {\n        $(\"body\").removeClass(\"subscribed\");\n    }\n});"]}